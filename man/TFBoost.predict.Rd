% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TREEBOOST.R
\name{TFBoost.predict}
\alias{TFBoost.predict}
\title{TFBoost.predict}
\usage{
TFBoost.predict(model, newx, newy, newz = NULL)
}
\arguments{
\item{model}{an object returned by TFBoost}

\item{newx}{functional predictor matrix for test data (matrix/dataframe)}

\item{newy}{scalar predictor matrix for test data (matrix/dataframe, optional, requires if model is trained with z_train and z_val)}

\item{newz}{scalar response vector for test data (vector/dataframe)}
}
\value{
A list with with the following components:

\item{f_t_test}{predicted values with model at the early stopping iteration using x_test (or x_test and z_test) as the predictors}
\item{err_test}{a vector of test errors before and at the early stopping iteration (returned if newy is provided)}
\item{save_f_test}{a matrix of test function estimates at all iterations (returned if save_f = TRUE in control)}
}
\description{
A function to make predictions and calculate test error given an object returned by TFBoost and test data
}
\details{
A function to make predictions and calculate test error given an object returned by TFBoost and test data
}
\author{
Xiaomeng Ju, \email{xmengju@stat.ubc.ca}

#' #' @examples
\dontrun{
data(GED)
n <- nrow(GED$price) 
n0 <- floor( 0.2 * n) 
set.seed(123)
idx_test <- sample(n, n0)
idx_train <- sample((1:n)[-idx_test], floor( 0.6 * n ) )
idx_val <- (1:n)[ -c(idx_test, idx_train) ] 
xtrain <- GED$price[idx_train, ]
ytrain <- GED$demand[idx_train ]
xval <- GED$price[idx_val, ]
yval <- GED$demand[idx_val ]
xtest <- GED$price[idx_test, ]
ytest <- GED$demand[idx_test ]
gg <- 1:24  
tt <- c(0,24) 
niter <- 1000
my.control <- TFBoost.control(make_prediction = TRUE, save_tree = TRUE,
                              tree_control = TREE.control(tree_type  = "B", d = 1, num_dir = 200), 
                             shrinkage = 0.05, nknot = 3, loss = "l2")
model_TFBoost <- TFBoost(x_train = xtrain, y_train = ytrain,  x_val = xval,  y_val = yval, 
                         grid = gg, t_range  = tt, niter = niter, 
                         control = my.control)
predictions<- TFBoost.predict(model_TFBoost, newx = xtest)
}
}
